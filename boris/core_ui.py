# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'boris.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1441, 604)
        MainWindow.setDockOptions(QtWidgets.QMainWindow.AllowNestedDocks|QtWidgets.QMainWindow.AllowTabbedDocks|QtWidgets.QMainWindow.AnimatedDocks)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.w_logo = QtWidgets.QWidget(self.centralwidget)
        self.w_logo.setObjectName("w_logo")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.w_logo)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.lbLogoBoris = QtWidgets.QLabel(self.w_logo)
        self.lbLogoBoris.setText("")
        self.lbLogoBoris.setScaledContents(False)
        self.lbLogoBoris.setAlignment(QtCore.Qt.AlignCenter)
        self.lbLogoBoris.setObjectName("lbLogoBoris")
        self.verticalLayout_6.addWidget(self.lbLogoBoris)
        self.lbLogoUnito = QtWidgets.QLabel(self.w_logo)
        self.lbLogoUnito.setText("")
        self.lbLogoUnito.setTextFormat(QtCore.Qt.AutoText)
        self.lbLogoUnito.setAlignment(QtCore.Qt.AlignCenter)
        self.lbLogoUnito.setWordWrap(True)
        self.lbLogoUnito.setObjectName("lbLogoUnito")
        self.verticalLayout_6.addWidget(self.lbLogoUnito)
        self.verticalLayout_8.addLayout(self.verticalLayout_6)
        self.verticalLayout_3.addWidget(self.w_logo)
        self.w_obs_info = QtWidgets.QWidget(self.centralwidget)
        self.w_obs_info.setEnabled(True)
        self.w_obs_info.setObjectName("w_obs_info")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.w_obs_info)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.lb_player_status = QtWidgets.QLabel(self.w_obs_info)
        self.lb_player_status.setObjectName("lb_player_status")
        self.verticalLayout_9.addWidget(self.lb_player_status)
        self.lb_current_media_time = QtWidgets.QLabel(self.w_obs_info)
        self.lb_current_media_time.setWordWrap(True)
        self.lb_current_media_time.setObjectName("lb_current_media_time")
        self.verticalLayout_9.addWidget(self.lb_current_media_time)
        self.lbFocalSubject = QtWidgets.QLabel(self.w_obs_info)
        self.lbFocalSubject.setWordWrap(True)
        self.lbFocalSubject.setObjectName("lbFocalSubject")
        self.verticalLayout_9.addWidget(self.lbFocalSubject)
        self.lbCurrentStates = QtWidgets.QLabel(self.w_obs_info)
        self.lbCurrentStates.setWordWrap(True)
        self.lbCurrentStates.setObjectName("lbCurrentStates")
        self.verticalLayout_9.addWidget(self.lbCurrentStates)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_9.addItem(spacerItem)
        self.verticalLayout_10.addLayout(self.verticalLayout_9)
        self.w_live = QtWidgets.QWidget(self.w_obs_info)
        self.w_live.setObjectName("w_live")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.w_live)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.pb_live_obs = QtWidgets.QPushButton(self.w_live)
        self.pb_live_obs.setObjectName("pb_live_obs")
        self.verticalLayout_11.addWidget(self.pb_live_obs)
        self.verticalLayout_10.addWidget(self.w_live)
        self.verticalLayout_3.addWidget(self.w_obs_info)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1441, 22))
        self.menubar.setObjectName("menubar")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuRecent_projects = QtWidgets.QMenu(self.menuFile)
        self.menuRecent_projects.setObjectName("menuRecent_projects")
        self.menuImport_project = QtWidgets.QMenu(self.menuFile)
        self.menuImport_project.setObjectName("menuImport_project")
        self.menuObservations = QtWidgets.QMenu(self.menubar)
        self.menuObservations.setObjectName("menuObservations")
        self.menuCreate_transitions_matrix = QtWidgets.QMenu(self.menuObservations)
        self.menuCreate_transitions_matrix.setObjectName("menuCreate_transitions_matrix")
        self.menuExport_events = QtWidgets.QMenu(self.menuObservations)
        self.menuExport_events.setObjectName("menuExport_events")
        self.menuas_behavioural_sequences = QtWidgets.QMenu(self.menuExport_events)
        self.menuas_behavioural_sequences.setObjectName("menuas_behavioural_sequences")
        self.menuAnalyze = QtWidgets.QMenu(self.menubar)
        self.menuAnalyze.setObjectName("menuAnalyze")
        self.menuPlot_events = QtWidgets.QMenu(self.menuAnalyze)
        self.menuPlot_events.setObjectName("menuPlot_events")
        self.menuInter_rater_reliability = QtWidgets.QMenu(self.menuAnalyze)
        self.menuInter_rater_reliability.setObjectName("menuInter_rater_reliability")
        self.menuSimilarities = QtWidgets.QMenu(self.menuAnalyze)
        self.menuSimilarities.setObjectName("menuSimilarities")
        self.menuPlayback = QtWidgets.QMenu(self.menubar)
        self.menuPlayback.setObjectName("menuPlayback")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        self.menuTransitions_flow_diagram = QtWidgets.QMenu(self.menuTools)
        self.menuTransitions_flow_diagram.setObjectName("menuTransitions_flow_diagram")
        self.menu_coding_map_creator = QtWidgets.QMenu(self.menuTools)
        self.menu_coding_map_creator.setObjectName("menu_coding_map_creator")
        self.menuImage_overlay_on_video = QtWidgets.QMenu(self.menuTools)
        self.menuImage_overlay_on_video.setObjectName("menuImage_overlay_on_video")
        MainWindow.setMenuBar(self.menubar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setEnabled(True)
        self.toolBar.setToolTip("")
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.dwEthogram = QtWidgets.QDockWidget(MainWindow)
        self.dwEthogram.setFloating(False)
        self.dwEthogram.setFeatures(QtWidgets.QDockWidget.DockWidgetFloatable|QtWidgets.QDockWidget.DockWidgetMovable)
        self.dwEthogram.setObjectName("dwEthogram")
        self.dockWidgetContents_3 = QtWidgets.QWidget()
        self.dockWidgetContents_3.setObjectName("dockWidgetContents_3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.dockWidgetContents_3)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.twEthogram = QtWidgets.QTableWidget(self.dockWidgetContents_3)
        self.twEthogram.setFocusPolicy(QtCore.Qt.NoFocus)
        self.twEthogram.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.twEthogram.setAlternatingRowColors(True)
        self.twEthogram.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.twEthogram.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.twEthogram.setObjectName("twEthogram")
        self.twEthogram.setColumnCount(7)
        self.twEthogram.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.twEthogram.setHorizontalHeaderItem(6, item)
        self.verticalLayout_4.addWidget(self.twEthogram)
        self.verticalLayout_5.addLayout(self.verticalLayout_4)
        self.dwEthogram.setWidget(self.dockWidgetContents_3)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dwEthogram)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setSizeGripEnabled(True)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dwObservations = QtWidgets.QDockWidget(MainWindow)
        self.dwObservations.setFocusPolicy(QtCore.Qt.NoFocus)
        self.dwObservations.setFloating(False)
        self.dwObservations.setFeatures(QtWidgets.QDockWidget.DockWidgetFloatable|QtWidgets.QDockWidget.DockWidgetMovable)
        self.dwObservations.setObjectName("dwObservations")
        self.dockWidgetContents_2 = QtWidgets.QWidget()
        self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.twEvents = QtWidgets.QTableWidget(self.dockWidgetContents_2)
        self.twEvents.setEnabled(True)
        self.twEvents.setFocusPolicy(QtCore.Qt.NoFocus)
        self.twEvents.setAutoScroll(False)
        self.twEvents.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.twEvents.setTabKeyNavigation(False)
        self.twEvents.setProperty("showDropIndicator", False)
        self.twEvents.setDragDropOverwriteMode(False)
        self.twEvents.setAlternatingRowColors(True)
        self.twEvents.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.twEvents.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.twEvents.setObjectName("twEvents")
        self.twEvents.setColumnCount(0)
        self.twEvents.setRowCount(0)
        self.verticalLayout.addWidget(self.twEvents)
        self.verticalLayout_7.addLayout(self.verticalLayout)
        self.dwObservations.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dwObservations)
        self.dwSubjects = QtWidgets.QDockWidget(MainWindow)
        self.dwSubjects.setFloating(False)
        self.dwSubjects.setFeatures(QtWidgets.QDockWidget.DockWidgetFloatable|QtWidgets.QDockWidget.DockWidgetMovable)
        self.dwSubjects.setObjectName("dwSubjects")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.twSubjects = QtWidgets.QTableWidget(self.dockWidgetContents)
        self.twSubjects.setFocusPolicy(QtCore.Qt.NoFocus)
        self.twSubjects.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.twSubjects.setAlternatingRowColors(True)
        self.twSubjects.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.twSubjects.setObjectName("twSubjects")
        self.twSubjects.setColumnCount(4)
        self.twSubjects.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.twSubjects.setHorizontalHeaderItem(3, item)
        self.verticalLayout_2.addWidget(self.twSubjects)
        self.dwSubjects.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dwSubjects)
        self.actionDocumentation = QtWidgets.QAction(MainWindow)
        self.actionDocumentation.setObjectName("actionDocumentation")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionPause = QtWidgets.QAction(MainWindow)
        self.actionPause.setObjectName("actionPause")
        self.actionPlay = QtWidgets.QAction(MainWindow)
        self.actionPlay.setObjectName("actionPlay")
        self.actionOpen_video_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_video_file.setObjectName("actionOpen_video_file")
        self.actionReset = QtWidgets.QAction(MainWindow)
        self.actionReset.setObjectName("actionReset")
        self.actionFaster = QtWidgets.QAction(MainWindow)
        self.actionFaster.setEnabled(True)
        self.actionFaster.setObjectName("actionFaster")
        self.actionSlower = QtWidgets.QAction(MainWindow)
        self.actionSlower.setEnabled(True)
        self.actionSlower.setObjectName("actionSlower")
        self.actionJumpForward = QtWidgets.QAction(MainWindow)
        self.actionJumpForward.setObjectName("actionJumpForward")
        self.actionLoad_configuration = QtWidgets.QAction(MainWindow)
        self.actionLoad_configuration.setObjectName("actionLoad_configuration")
        self.actionDelete_selected_observations = QtWidgets.QAction(MainWindow)
        self.actionDelete_selected_observations.setObjectName("actionDelete_selected_observations")
        self.actionDelete_all_observations = QtWidgets.QAction(MainWindow)
        self.actionDelete_all_observations.setObjectName("actionDelete_all_observations")
        self.actionSort_observations = QtWidgets.QAction(MainWindow)
        self.actionSort_observations.setObjectName("actionSort_observations")
        self.actionLoad_observations_file = QtWidgets.QAction(MainWindow)
        self.actionLoad_observations_file.setObjectName("actionLoad_observations_file")
        self.actionSelect_observations = QtWidgets.QAction(MainWindow)
        self.actionSelect_observations.setObjectName("actionSelect_observations")
        self.actionConfigure_states_and_events = QtWidgets.QAction(MainWindow)
        self.actionConfigure_states_and_events.setEnabled(False)
        self.actionConfigure_states_and_events.setObjectName("actionConfigure_states_and_events")
        self.actionEdit_event = QtWidgets.QAction(MainWindow)
        self.actionEdit_event.setObjectName("actionEdit_event")
        self.actionLoad_configuration_file = QtWidgets.QAction(MainWindow)
        self.actionLoad_configuration_file.setObjectName("actionLoad_configuration_file")
        self.actionMedia_file_information = QtWidgets.QAction(MainWindow)
        self.actionMedia_file_information.setObjectName("actionMedia_file_information")
        self.actionStart_live_observation = QtWidgets.QAction(MainWindow)
        self.actionStart_live_observation.setObjectName("actionStart_live_observation")
        self.actionNew_project = QtWidgets.QAction(MainWindow)
        self.actionNew_project.setObjectName("actionNew_project")
        self.actionTime_budget = QtWidgets.QAction(MainWindow)
        self.actionTime_budget.setEnabled(True)
        self.actionTime_budget.setIconVisibleInMenu(True)
        self.actionTime_budget.setObjectName("actionTime_budget")
        self.actionSave_project = QtWidgets.QAction(MainWindow)
        self.actionSave_project.setObjectName("actionSave_project")
        self.actionOpen_project = QtWidgets.QAction(MainWindow)
        self.actionOpen_project.setObjectName("actionOpen_project")
        self.actionSet_offset = QtWidgets.QAction(MainWindow)
        self.actionSet_offset.setObjectName("actionSet_offset")
        self.actionEdit_project = QtWidgets.QAction(MainWindow)
        self.actionEdit_project.setObjectName("actionEdit_project")
        self.actionSave_project_as = QtWidgets.QAction(MainWindow)
        self.actionSave_project_as.setObjectName("actionSave_project_as")
        self.actionPreferences = QtWidgets.QAction(MainWindow)
        self.actionPreferences.setObjectName("actionPreferences")
        self.actionNew_observation = QtWidgets.QAction(MainWindow)
        self.actionNew_observation.setObjectName("actionNew_observation")
        self.actionSave_observation = QtWidgets.QAction(MainWindow)
        self.actionSave_observation.setObjectName("actionSave_observation")
        self.actionClose_observation = QtWidgets.QAction(MainWindow)
        self.actionClose_observation.setObjectName("actionClose_observation")
        self.actionEdit_current_observation = QtWidgets.QAction(MainWindow)
        self.actionEdit_current_observation.setEnabled(False)
        self.actionEdit_current_observation.setObjectName("actionEdit_current_observation")
        self.actionOpen_observation_2 = QtWidgets.QAction(MainWindow)
        self.actionOpen_observation_2.setEnabled(False)
        self.actionOpen_observation_2.setVisible(False)
        self.actionOpen_observation_2.setObjectName("actionOpen_observation_2")
        self.actionAdd_event = QtWidgets.QAction(MainWindow)
        self.actionAdd_event.setObjectName("actionAdd_event")
        self.actionDeselectCurrentSubject = QtWidgets.QAction(MainWindow)
        self.actionDeselectCurrentSubject.setObjectName("actionDeselectCurrentSubject")
        self.actionNext = QtWidgets.QAction(MainWindow)
        self.actionNext.setIconVisibleInMenu(False)
        self.actionNext.setObjectName("actionNext")
        self.actionPrevious = QtWidgets.QAction(MainWindow)
        self.actionPrevious.setObjectName("actionPrevious")
        self.actionJumpTo = QtWidgets.QAction(MainWindow)
        self.actionJumpTo.setEnabled(True)
        self.actionJumpTo.setObjectName("actionJumpTo")
        self.actionJumpBackward = QtWidgets.QAction(MainWindow)
        self.actionJumpBackward.setObjectName("actionJumpBackward")
        self.actionEdit_observation = QtWidgets.QAction(MainWindow)
        self.actionEdit_observation.setEnabled(False)
        self.actionEdit_observation.setVisible(False)
        self.actionEdit_observation.setObjectName("actionEdit_observation")
        self.actionCheckUpdate = QtWidgets.QAction(MainWindow)
        self.actionCheckUpdate.setObjectName("actionCheckUpdate")
        self.actionClose_project = QtWidgets.QAction(MainWindow)
        self.actionClose_project.setObjectName("actionClose_project")
        self.actionObservationsList = QtWidgets.QAction(MainWindow)
        self.actionObservationsList.setObjectName("actionObservationsList")
        self.actionNormalSpeed = QtWidgets.QAction(MainWindow)
        self.actionNormalSpeed.setObjectName("actionNormalSpeed")
        self.actionSnapshot = QtWidgets.QAction(MainWindow)
        self.actionSnapshot.setObjectName("actionSnapshot")
        self.actionFrame_by_frame = QtWidgets.QAction(MainWindow)
        self.actionFrame_by_frame.setCheckable(True)
        self.actionFrame_by_frame.setObjectName("actionFrame_by_frame")
        self.actionAggregatedEventsTabularFormat = QtWidgets.QAction(MainWindow)
        self.actionAggregatedEventsTabularFormat.setObjectName("actionAggregatedEventsTabularFormat")
        self.actionOpen_observation = QtWidgets.QAction(MainWindow)
        self.actionOpen_observation.setObjectName("actionOpen_observation")
        self.actionAaaa = QtWidgets.QAction(MainWindow)
        self.actionAaaa.setObjectName("actionAaaa")
        self.menuCreate_subtitles_2 = QtWidgets.QAction(MainWindow)
        self.menuCreate_subtitles_2.setObjectName("menuCreate_subtitles_2")
        self.actionUser_guide = QtWidgets.QAction(MainWindow)
        self.actionUser_guide.setObjectName("actionUser_guide")
        self.actionEdit_observation_2 = QtWidgets.QAction(MainWindow)
        self.actionEdit_observation_2.setObjectName("actionEdit_observation_2")
        self.actionCheckStateEvents = QtWidgets.QAction(MainWindow)
        self.actionCheckStateEvents.setObjectName("actionCheckStateEvents")
        self.actionRunEventOutside = QtWidgets.QAction(MainWindow)
        self.actionRunEventOutside.setObjectName("actionRunEventOutside")
        self.actionEdit_selected_events = QtWidgets.QAction(MainWindow)
        self.actionEdit_selected_events.setObjectName("actionEdit_selected_events")
        self.actionShow_spectrogram = QtWidgets.QAction(MainWindow)
        self.actionShow_spectrogram.setObjectName("actionShow_spectrogram")
        self.actionExport_events_as_Praat_TextGrid = QtWidgets.QAction(MainWindow)
        self.actionExport_events_as_Praat_TextGrid.setObjectName("actionExport_events_as_Praat_TextGrid")
        self.actionExtract_events_from_media_files = QtWidgets.QAction(MainWindow)
        self.actionExtract_events_from_media_files.setObjectName("actionExtract_events_from_media_files")
        self.actionDistance = QtWidgets.QAction(MainWindow)
        self.actionDistance.setObjectName("actionDistance")
        self.actionFrame_forward = QtWidgets.QAction(MainWindow)
        self.actionFrame_forward.setObjectName("actionFrame_forward")
        self.actionFrame_backward = QtWidgets.QAction(MainWindow)
        self.actionFrame_backward.setObjectName("actionFrame_backward")
        self.actionFilterBehaviors = QtWidgets.QAction(MainWindow)
        self.actionFilterBehaviors.setObjectName("actionFilterBehaviors")
        self.actionShowAllBehaviors = QtWidgets.QAction(MainWindow)
        self.actionShowAllBehaviors.setObjectName("actionShowAllBehaviors")
        self.actionExport_aggregated_events = QtWidgets.QAction(MainWindow)
        self.actionExport_aggregated_events.setObjectName("actionExport_aggregated_events")
        self.actionCoding_pad = QtWidgets.QAction(MainWindow)
        self.actionCoding_pad.setObjectName("actionCoding_pad")
        self.actionTime_budget_by_behaviors_category = QtWidgets.QAction(MainWindow)
        self.actionTime_budget_by_behaviors_category.setObjectName("actionTime_budget_by_behaviors_category")
        self.actionExport_events_as_SDIS_file = QtWidgets.QAction(MainWindow)
        self.actionExport_events_as_SDIS_file.setObjectName("actionExport_events_as_SDIS_file")
        self.actionRecode_resize_video = QtWidgets.QAction(MainWindow)
        self.actionRecode_resize_video.setObjectName("actionRecode_resize_video")
        self.actionMedia_file_information_2 = QtWidgets.QAction(MainWindow)
        self.actionMedia_file_information_2.setObjectName("actionMedia_file_information_2")
        self.actionCreate_transitions_flow_diagram = QtWidgets.QAction(MainWindow)
        self.actionCreate_transitions_flow_diagram.setObjectName("actionCreate_transitions_flow_diagram")
        self.actionCreate_transitions_flow_diagram_2 = QtWidgets.QAction(MainWindow)
        self.actionCreate_transitions_flow_diagram_2.setObjectName("actionCreate_transitions_flow_diagram_2")
        self.actionAll_transitions = QtWidgets.QAction(MainWindow)
        self.actionAll_transitions.setObjectName("actionAll_transitions")
        self.actionNumber_of_transitions = QtWidgets.QAction(MainWindow)
        self.actionNumber_of_transitions.setObjectName("actionNumber_of_transitions")
        self.actionFrequencies_of_transitions_after_behaviors = QtWidgets.QAction(MainWindow)
        self.actionFrequencies_of_transitions_after_behaviors.setObjectName("actionFrequencies_of_transitions_after_behaviors")
        self.actionFind_replace_events = QtWidgets.QAction(MainWindow)
        self.actionFind_replace_events.setObjectName("actionFind_replace_events")
        self.actionFind_events = QtWidgets.QAction(MainWindow)
        self.actionFind_events.setObjectName("actionFind_events")
        self.actionHow_to_cite_BORIS = QtWidgets.QAction(MainWindow)
        self.actionHow_to_cite_BORIS.setObjectName("actionHow_to_cite_BORIS")
        self.actionZoom1_1_1 = QtWidgets.QAction(MainWindow)
        self.actionZoom1_1_1.setCheckable(True)
        self.actionZoom1_1_1.setObjectName("actionZoom1_1_1")
        self.actionZoom1_2_1 = QtWidgets.QAction(MainWindow)
        self.actionZoom1_2_1.setCheckable(True)
        self.actionZoom1_2_1.setObjectName("actionZoom1_2_1")
        self.actionZoom1_1_2 = QtWidgets.QAction(MainWindow)
        self.actionZoom1_1_2.setCheckable(True)
        self.actionZoom1_1_2.setObjectName("actionZoom1_1_2")
        self.actionZoom1_1_4 = QtWidgets.QAction(MainWindow)
        self.actionZoom1_1_4.setCheckable(True)
        self.actionZoom1_1_4.setObjectName("actionZoom1_1_4")
        self.actionZoom1_fitwindow = QtWidgets.QAction(MainWindow)
        self.actionZoom1_fitwindow.setCheckable(True)
        self.actionZoom1_fitwindow.setObjectName("actionZoom1_fitwindow")
        self.actionZoom2_fitwindow = QtWidgets.QAction(MainWindow)
        self.actionZoom2_fitwindow.setCheckable(True)
        self.actionZoom2_fitwindow.setObjectName("actionZoom2_fitwindow")
        self.actionZoom2_1_4 = QtWidgets.QAction(MainWindow)
        self.actionZoom2_1_4.setCheckable(True)
        self.actionZoom2_1_4.setObjectName("actionZoom2_1_4")
        self.actionZoom2_1_2 = QtWidgets.QAction(MainWindow)
        self.actionZoom2_1_2.setCheckable(True)
        self.actionZoom2_1_2.setObjectName("actionZoom2_1_2")
        self.actionZoom2_1_1 = QtWidgets.QAction(MainWindow)
        self.actionZoom2_1_1.setCheckable(True)
        self.actionZoom2_1_1.setObjectName("actionZoom2_1_1")
        self.actionZoom2_2_1 = QtWidgets.QAction(MainWindow)
        self.actionZoom2_2_1.setCheckable(True)
        self.actionZoom2_2_1.setObjectName("actionZoom2_2_1")
        self.actionFilterSubjects = QtWidgets.QAction(MainWindow)
        self.actionFilterSubjects.setObjectName("actionFilterSubjects")
        self.actionShowAllSubjects = QtWidgets.QAction(MainWindow)
        self.actionShowAllSubjects.setObjectName("actionShowAllSubjects")
        self.actionSend_project = QtWidgets.QAction(MainWindow)
        self.actionSend_project.setObjectName("actionSend_project")
        self.actionViewBehavior = QtWidgets.QAction(MainWindow)
        self.actionViewBehavior.setObjectName("actionViewBehavior")
        self.actionBehaviors_coding_map = QtWidgets.QAction(MainWindow)
        self.actionBehaviors_coding_map.setObjectName("actionBehaviors_coding_map")
        self.action_create_behaviors_coding_map = QtWidgets.QAction(MainWindow)
        self.action_create_behaviors_coding_map.setObjectName("action_create_behaviors_coding_map")
        self.action_create_modifiers_coding_map = QtWidgets.QAction(MainWindow)
        self.action_create_modifiers_coding_map.setObjectName("action_create_modifiers_coding_map")
        self.actionPlot_events1 = QtWidgets.QAction(MainWindow)
        self.actionPlot_events1.setObjectName("actionPlot_events1")
        self.actionPlot_events2 = QtWidgets.QAction(MainWindow)
        self.actionPlot_events2.setObjectName("actionPlot_events2")
        self.actionCohen_s_kappa = QtWidgets.QAction(MainWindow)
        self.actionCohen_s_kappa.setObjectName("actionCohen_s_kappa")
        self.actionTime_budget_report = QtWidgets.QAction(MainWindow)
        self.actionTime_budget_report.setObjectName("actionTime_budget_report")
        self.actionCheckStateEventsSingleObs = QtWidgets.QAction(MainWindow)
        self.actionCheckStateEventsSingleObs.setObjectName("actionCheckStateEventsSingleObs")
        self.actionSubjects_pad = QtWidgets.QAction(MainWindow)
        self.actionSubjects_pad.setObjectName("actionSubjects_pad")
        self.actionShow_data_files = QtWidgets.QAction(MainWindow)
        self.actionShow_data_files.setObjectName("actionShow_data_files")
        self.actionConverters_manager = QtWidgets.QAction(MainWindow)
        self.actionConverters_manager.setObjectName("actionConverters_manager")
        self.actionView_observation = QtWidgets.QAction(MainWindow)
        self.actionView_observation.setObjectName("actionView_observation")
        self.actionRemove_path_from_media_files = QtWidgets.QAction(MainWindow)
        self.actionRemove_path_from_media_files.setObjectName("actionRemove_path_from_media_files")
        self.actionCheck_project = QtWidgets.QAction(MainWindow)
        self.actionCheck_project.setObjectName("actionCheck_project")
        self.actionBehavior_bar_plot = QtWidgets.QAction(MainWindow)
        self.actionBehavior_bar_plot.setObjectName("actionBehavior_bar_plot")
        self.action_obs_list = QtWidgets.QAction(MainWindow)
        self.action_obs_list.setObjectName("action_obs_list")
        self.actionTest = QtWidgets.QAction(MainWindow)
        self.actionTest.setObjectName("actionTest")
        self.actionTest_stb2 = QtWidgets.QAction(MainWindow)
        self.actionTest_stb2.setObjectName("actionTest_stb2")
        self.actionClose_unpaired_events = QtWidgets.QAction(MainWindow)
        self.actionClose_unpaired_events.setObjectName("actionClose_unpaired_events")
        self.actionRotate_video = QtWidgets.QAction(MainWindow)
        self.actionRotate_video.setObjectName("actionRotate_video")
        self.actionExport_observations_list = QtWidgets.QAction(MainWindow)
        self.actionExport_observations_list.setObjectName("actionExport_observations_list")
        self.actionExportEvents_2 = QtWidgets.QAction(MainWindow)
        self.actionExportEvents_2.setObjectName("actionExportEvents_2")
        self.actionJWatcher = QtWidgets.QAction(MainWindow)
        self.actionJWatcher.setObjectName("actionJWatcher")
        self.actionCloseObs = QtWidgets.QAction(MainWindow)
        self.actionCloseObs.setEnabled(True)
        self.actionCloseObs.setObjectName("actionCloseObs")
        self.actionFilter_events = QtWidgets.QAction(MainWindow)
        self.actionFilter_events.setObjectName("actionFilter_events")
        self.actionShow_all_events = QtWidgets.QAction(MainWindow)
        self.actionShow_all_events.setObjectName("actionShow_all_events")
        self.actionEdit_event_time = QtWidgets.QAction(MainWindow)
        self.actionEdit_event_time.setObjectName("actionEdit_event_time")
        self.actionCopy_events = QtWidgets.QAction(MainWindow)
        self.actionCopy_events.setObjectName("actionCopy_events")
        self.actionPaste_events = QtWidgets.QAction(MainWindow)
        self.actionPaste_events.setObjectName("actionPaste_events")
        self.actionNoldus_Observer_template = QtWidgets.QAction(MainWindow)
        self.actionNoldus_Observer_template.setObjectName("actionNoldus_Observer_template")
        self.actionExplore_project = QtWidgets.QAction(MainWindow)
        self.actionExplore_project.setObjectName("actionExplore_project")
        self.actionShow_the_sound_waveform = QtWidgets.QAction(MainWindow)
        self.actionShow_the_sound_waveform.setObjectName("actionShow_the_sound_waveform")
        self.actionNeedleman_Wunsch = QtWidgets.QAction(MainWindow)
        self.actionNeedleman_Wunsch.setObjectName("actionNeedleman_Wunsch")
        self.actionExtract_frames_from_media_files = QtWidgets.QAction(MainWindow)
        self.actionExtract_frames_from_media_files.setObjectName("actionExtract_frames_from_media_files")
        self.actionAdd_image_overlay_on_video = QtWidgets.QAction(MainWindow)
        self.actionAdd_image_overlay_on_video.setObjectName("actionAdd_image_overlay_on_video")
        self.actionRemove_image_overlay = QtWidgets.QAction(MainWindow)
        self.actionRemove_image_overlay.setObjectName("actionRemove_image_overlay")
        self.action_behavior_binary_table = QtWidgets.QAction(MainWindow)
        self.action_behavior_binary_table.setEnabled(True)
        self.action_behavior_binary_table.setObjectName("action_behavior_binary_table")
        self.actionPlot_current_observation = QtWidgets.QAction(MainWindow)
        self.actionPlot_current_observation.setObjectName("actionPlot_current_observation")
        self.actionFind_in_current_obs = QtWidgets.QAction(MainWindow)
        self.actionFind_in_current_obs.setObjectName("actionFind_in_current_obs")
        self.action_advanced_event_filtering = QtWidgets.QAction(MainWindow)
        self.action_advanced_event_filtering.setObjectName("action_advanced_event_filtering")
        self.action_block_dockwidgets = QtWidgets.QAction(MainWindow)
        self.action_block_dockwidgets.setCheckable(True)
        self.action_block_dockwidgets.setObjectName("action_block_dockwidgets")
        self.actionseparated_subjects = QtWidgets.QAction(MainWindow)
        self.actionseparated_subjects.setObjectName("actionseparated_subjects")
        self.actiongrouped_subjects = QtWidgets.QAction(MainWindow)
        self.actiongrouped_subjects.setObjectName("actiongrouped_subjects")
        self.actionCurrent_Time_Budget = QtWidgets.QAction(MainWindow)
        self.actionCurrent_Time_Budget.setObjectName("actionCurrent_Time_Budget")
        self.actionSynthetic_binned_time_budget = QtWidgets.QAction(MainWindow)
        self.actionSynthetic_binned_time_budget.setObjectName("actionSynthetic_binned_time_budget")
        self.actionZoom_level = QtWidgets.QAction(MainWindow)
        self.actionZoom_level.setObjectName("actionZoom_level")
        self.menuHelp.addAction(self.actionUser_guide)
        self.menuHelp.addAction(self.actionCheckUpdate)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout)
        self.menuRecent_projects.addSeparator()
        self.menuImport_project.addAction(self.actionNoldus_Observer_template)
        self.menuFile.addAction(self.actionNew_project)
        self.menuFile.addAction(self.actionOpen_project)
        self.menuFile.addAction(self.menuRecent_projects.menuAction())
        self.menuFile.addAction(self.menuImport_project.menuAction())
        self.menuFile.addAction(self.actionEdit_project)
        self.menuFile.addAction(self.actionSave_project)
        self.menuFile.addAction(self.actionSave_project_as)
        self.menuFile.addAction(self.actionClose_project)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionCheck_project)
        self.menuFile.addAction(self.actionRemove_path_from_media_files)
        self.menuFile.addAction(self.actionSend_project)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPreferences)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuCreate_transitions_matrix.addAction(self.actionAll_transitions)
        self.menuCreate_transitions_matrix.addAction(self.actionFrequencies_of_transitions_after_behaviors)
        self.menuCreate_transitions_matrix.addAction(self.actionNumber_of_transitions)
        self.menuas_behavioural_sequences.addAction(self.actionseparated_subjects)
        self.menuas_behavioural_sequences.addAction(self.actiongrouped_subjects)
        self.menuExport_events.addAction(self.actionExportEvents_2)
        self.menuExport_events.addAction(self.actionExport_aggregated_events)
        self.menuExport_events.addAction(self.menuas_behavioural_sequences.menuAction())
        self.menuExport_events.addAction(self.actionExport_events_as_Praat_TextGrid)
        self.menuExport_events.addAction(self.actionJWatcher)
        self.menuExport_events.addAction(self.action_behavior_binary_table)
        self.menuObservations.addAction(self.actionNew_observation)
        self.menuObservations.addAction(self.actionOpen_observation)
        self.menuObservations.addAction(self.actionView_observation)
        self.menuObservations.addAction(self.actionEdit_observation_2)
        self.menuObservations.addAction(self.actionObservationsList)
        self.menuObservations.addAction(self.actionOpen_observation_2)
        self.menuObservations.addAction(self.actionEdit_observation)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionClose_observation)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionLoad_observations_file)
        self.menuObservations.addAction(self.actionExport_observations_list)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionAdd_event)
        self.menuObservations.addAction(self.actionEdit_selected_events)
        self.menuObservations.addAction(self.actionEdit_event_time)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionExplore_project)
        self.menuObservations.addAction(self.actionFind_events)
        self.menuObservations.addAction(self.actionFind_replace_events)
        self.menuObservations.addAction(self.actionCheckStateEvents)
        self.menuObservations.addAction(self.actionClose_unpaired_events)
        self.menuObservations.addAction(self.actionSelect_observations)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.actionDelete_selected_observations)
        self.menuObservations.addAction(self.actionDelete_all_observations)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.menuExport_events.menuAction())
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.menuCreate_subtitles_2)
        self.menuObservations.addAction(self.actionExtract_events_from_media_files)
        self.menuObservations.addAction(self.actionExtract_frames_from_media_files)
        self.menuObservations.addSeparator()
        self.menuObservations.addAction(self.menuCreate_transitions_matrix.menuAction())
        self.menuPlot_events.addAction(self.actionPlot_events2)
        self.menuPlot_events.addAction(self.actionBehavior_bar_plot)
        self.menuInter_rater_reliability.addAction(self.actionCohen_s_kappa)
        self.menuSimilarities.addAction(self.actionNeedleman_Wunsch)
        self.menuAnalyze.addAction(self.actionTime_budget)
        self.menuAnalyze.addAction(self.actionTime_budget_by_behaviors_category)
        self.menuAnalyze.addAction(self.actionTime_budget_report)
        self.menuAnalyze.addAction(self.actionSynthetic_binned_time_budget)
        self.menuAnalyze.addAction(self.menuPlot_events.menuAction())
        self.menuAnalyze.addAction(self.menuInter_rater_reliability.menuAction())
        self.menuAnalyze.addAction(self.menuSimilarities.menuAction())
        self.menuAnalyze.addAction(self.action_advanced_event_filtering)
        self.menuPlayback.addAction(self.actionJumpForward)
        self.menuPlayback.addAction(self.actionJumpBackward)
        self.menuPlayback.addAction(self.actionJumpTo)
        self.menuPlayback.addSeparator()
        self.menuPlayback.addAction(self.actionZoom_level)
        self.menuPlayback.addSeparator()
        self.menuPlayback.addAction(self.actionPlay)
        self.menuPlayback.addAction(self.actionPause)
        self.menuPlayback.addAction(self.actionPrevious)
        self.menuPlayback.addAction(self.actionNext)
        self.menuTransitions_flow_diagram.addAction(self.actionCreate_transitions_flow_diagram)
        self.menuTransitions_flow_diagram.addAction(self.actionCreate_transitions_flow_diagram_2)
        self.menu_coding_map_creator.addAction(self.action_create_behaviors_coding_map)
        self.menu_coding_map_creator.addAction(self.action_create_modifiers_coding_map)
        self.menuImage_overlay_on_video.addAction(self.actionAdd_image_overlay_on_video)
        self.menuImage_overlay_on_video.addAction(self.actionRemove_image_overlay)
        self.menuTools.addAction(self.action_block_dockwidgets)
        self.menuTools.addAction(self.actionShow_spectrogram)
        self.menuTools.addAction(self.actionShow_the_sound_waveform)
        self.menuTools.addAction(self.actionShow_data_files)
        self.menuTools.addAction(self.actionDistance)
        self.menuTools.addAction(self.actionBehaviors_coding_map)
        self.menuTools.addAction(self.actionCoding_pad)
        self.menuTools.addAction(self.actionSubjects_pad)
        self.menuTools.addAction(self.menuImage_overlay_on_video.menuAction())
        self.menuTools.addSeparator()
        self.menuTools.addAction(self.menu_coding_map_creator.menuAction())
        self.menuTools.addAction(self.actionRecode_resize_video)
        self.menuTools.addAction(self.actionRotate_video)
        self.menuTools.addAction(self.actionMedia_file_information_2)
        self.menuTools.addAction(self.menuTransitions_flow_diagram.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuObservations.menuAction())
        self.menubar.addAction(self.menuPlayback.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuAnalyze.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addAction(self.action_obs_list)
        self.toolBar.addAction(self.actionPlay)
        self.toolBar.addAction(self.actionReset)
        self.toolBar.addAction(self.actionJumpBackward)
        self.toolBar.addAction(self.actionJumpForward)
        self.toolBar.addAction(self.actionNormalSpeed)
        self.toolBar.addAction(self.actionFaster)
        self.toolBar.addAction(self.actionSlower)
        self.toolBar.addAction(self.actionPrevious)
        self.toolBar.addAction(self.actionNext)
        self.toolBar.addAction(self.actionSnapshot)
        self.toolBar.addAction(self.actionFrame_by_frame)
        self.toolBar.addAction(self.actionFrame_backward)
        self.toolBar.addAction(self.actionFrame_forward)
        self.toolBar.addAction(self.actionCloseObs)
        self.toolBar.addAction(self.actionCurrent_Time_Budget)
        self.toolBar.addAction(self.actionPlot_current_observation)
        self.toolBar.addAction(self.actionFind_in_current_obs)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "BORIS"))
        self.lb_player_status.setText(_translate("MainWindow", "lb_player_status"))
        self.lb_current_media_time.setText(_translate("MainWindow", "lb_current_media_time"))
        self.lbFocalSubject.setText(_translate("MainWindow", "lbFocalSubject"))
        self.lbCurrentStates.setText(_translate("MainWindow", "lbCurrentStates"))
        self.pb_live_obs.setText(_translate("MainWindow", "PushButton"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuRecent_projects.setTitle(_translate("MainWindow", "Recent projects"))
        self.menuImport_project.setTitle(_translate("MainWindow", "Import project from..."))
        self.menuObservations.setTitle(_translate("MainWindow", "Observations"))
        self.menuCreate_transitions_matrix.setTitle(_translate("MainWindow", "Create transitions matrix"))
        self.menuExport_events.setTitle(_translate("MainWindow", "Export events"))
        self.menuas_behavioural_sequences.setTitle(_translate("MainWindow", "as behavioural sequences"))
        self.menuAnalyze.setTitle(_translate("MainWindow", "Analysis"))
        self.menuPlot_events.setTitle(_translate("MainWindow", "Plot"))
        self.menuInter_rater_reliability.setTitle(_translate("MainWindow", "Inter-rater reliability"))
        self.menuSimilarities.setTitle(_translate("MainWindow", "Similarities"))
        self.menuPlayback.setTitle(_translate("MainWindow", "Playback"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.menuTransitions_flow_diagram.setTitle(_translate("MainWindow", "Transitions flow diagram"))
        self.menu_coding_map_creator.setTitle(_translate("MainWindow", "Create a coding map"))
        self.menuImage_overlay_on_video.setTitle(_translate("MainWindow", "Image overlay on video"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.dwEthogram.setWindowTitle(_translate("MainWindow", "Ethogram"))
        self.twEthogram.setSortingEnabled(False)
        item = self.twEthogram.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Key"))
        item = self.twEthogram.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Code"))
        item = self.twEthogram.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Type"))
        item = self.twEthogram.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Description"))
        item = self.twEthogram.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Category"))
        item = self.twEthogram.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Modifiers"))
        item = self.twEthogram.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Excluded"))
        self.dwObservations.setWindowTitle(_translate("MainWindow", "Events"))
        self.dwSubjects.setWindowTitle(_translate("MainWindow", "Subjects"))
        item = self.twSubjects.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Key"))
        item = self.twSubjects.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Name"))
        item = self.twSubjects.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Description"))
        item = self.twSubjects.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Current state(s)"))
        self.actionDocumentation.setText(_translate("MainWindow", "Documentation"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        self.actionPause.setText(_translate("MainWindow", "Pause"))
        self.actionPause.setToolTip(_translate("MainWindow", "Pause"))
        self.actionPlay.setText(_translate("MainWindow", "Play"))
        self.actionOpen_video_file.setText(_translate("MainWindow", "Open media file"))
        self.actionReset.setText(_translate("MainWindow", "Reset"))
        self.actionFaster.setText(_translate("MainWindow", "Faster"))
        self.actionSlower.setText(_translate("MainWindow", "Slower"))
        self.actionJumpForward.setText(_translate("MainWindow", "Jump forward"))
        self.actionJumpForward.setShortcut(_translate("MainWindow", "Ctrl+F"))
        self.actionLoad_configuration.setText(_translate("MainWindow", "Load configuration"))
        self.actionDelete_selected_observations.setText(_translate("MainWindow", "Delete selected events"))
        self.actionDelete_all_observations.setText(_translate("MainWindow", "Delete all events"))
        self.actionSort_observations.setText(_translate("MainWindow", "Sort events"))
        self.actionLoad_observations_file.setText(_translate("MainWindow", "Import observations"))
        self.actionSelect_observations.setText(_translate("MainWindow", "Select events from interval"))
        self.actionConfigure_states_and_events.setText(_translate("MainWindow", "Configure states and events"))
        self.actionEdit_event.setText(_translate("MainWindow", "Edit event"))
        self.actionLoad_configuration_file.setText(_translate("MainWindow", "Load state and events configuration file"))
        self.actionMedia_file_information.setText(_translate("MainWindow", "Media file information"))
        self.actionStart_live_observation.setText(_translate("MainWindow", "Start observation without media file"))
        self.actionNew_project.setText(_translate("MainWindow", "New project"))
        self.actionTime_budget.setText(_translate("MainWindow", "Time budget"))
        self.actionSave_project.setText(_translate("MainWindow", "Save project"))
        self.actionSave_project.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionOpen_project.setText(_translate("MainWindow", "Open project"))
        self.actionSet_offset.setText(_translate("MainWindow", "Set time offset"))
        self.actionEdit_project.setText(_translate("MainWindow", "Edit project"))
        self.actionSave_project_as.setText(_translate("MainWindow", "Save project as ..."))
        self.actionPreferences.setText(_translate("MainWindow", "Preferences"))
        self.actionNew_observation.setText(_translate("MainWindow", "New observation"))
        self.actionNew_observation.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionSave_observation.setText(_translate("MainWindow", "Save current observation"))
        self.actionClose_observation.setText(_translate("MainWindow", "Close observation"))
        self.actionClose_observation.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionEdit_current_observation.setText(_translate("MainWindow", "Edit current observation"))
        self.actionOpen_observation_2.setText(_translate("MainWindow", "Open observation"))
        self.actionAdd_event.setText(_translate("MainWindow", "Add event"))
        self.actionAdd_event.setShortcut(_translate("MainWindow", "Ctrl+A"))
        self.actionDeselectCurrentSubject.setText(_translate("MainWindow", "Deselect current subject"))
        self.actionNext.setText(_translate("MainWindow", "Next"))
        self.actionNext.setToolTip(_translate("MainWindow", "Next media file"))
        self.actionPrevious.setText(_translate("MainWindow", "Previous"))
        self.actionPrevious.setToolTip(_translate("MainWindow", "Previous media file"))
        self.actionJumpTo.setText(_translate("MainWindow", "Jump to specific time"))
        self.actionJumpBackward.setText(_translate("MainWindow", "Jump backward"))
        self.actionJumpBackward.setToolTip(_translate("MainWindow", "Jump backward"))
        self.actionJumpBackward.setShortcut(_translate("MainWindow", "Ctrl+B"))
        self.actionEdit_observation.setText(_translate("MainWindow", "Edit observation"))
        self.actionCheckUpdate.setText(_translate("MainWindow", "Check for updates and news"))
        self.actionClose_project.setText(_translate("MainWindow", "Close project"))
        self.actionObservationsList.setText(_translate("MainWindow", "Observations list"))
        self.actionObservationsList.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.actionNormalSpeed.setText(_translate("MainWindow", "Normal speed"))
        self.actionSnapshot.setText(_translate("MainWindow", "Snapshot"))
        self.actionFrame_by_frame.setText(_translate("MainWindow", "Frame by frame"))
        self.actionAggregatedEventsTabularFormat.setText(_translate("MainWindow", "Tab Separated Values (tsv)"))
        self.actionOpen_observation.setText(_translate("MainWindow", "Start observation"))
        self.actionOpen_observation.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionAaaa.setText(_translate("MainWindow", "aaaa"))
        self.menuCreate_subtitles_2.setText(_translate("MainWindow", "Create subtitles"))
        self.actionUser_guide.setText(_translate("MainWindow", "User guide"))
        self.actionEdit_observation_2.setText(_translate("MainWindow", "Edit observation"))
        self.actionEdit_observation_2.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionCheckStateEvents.setText(_translate("MainWindow", "Check state events"))
        self.actionRunEventOutside.setText(_translate("MainWindow", "Run external program with selected event(s)"))
        self.actionEdit_selected_events.setText(_translate("MainWindow", "Edit selected event(s)"))
        self.actionShow_spectrogram.setText(_translate("MainWindow", "Show the sound spectrogram"))
        self.actionExport_events_as_Praat_TextGrid.setText(_translate("MainWindow", "as Praat TextGrid"))
        self.actionExtract_events_from_media_files.setText(_translate("MainWindow", "Extract sequences from media files"))
        self.actionDistance.setText(_translate("MainWindow", "Geometric measurement"))
        self.actionFrame_forward.setText(_translate("MainWindow", "Frame forward"))
        self.actionFrame_backward.setText(_translate("MainWindow", "frame backward"))
        self.actionFilterBehaviors.setText(_translate("MainWindow", "Filter behaviors"))
        self.actionShowAllBehaviors.setText(_translate("MainWindow", "Show all behaviors"))
        self.actionShowAllBehaviors.setToolTip(_translate("MainWindow", "Show all behaviors"))
        self.actionExport_aggregated_events.setText(_translate("MainWindow", "Aggregated events"))
        self.actionCoding_pad.setText(_translate("MainWindow", "Coding pad"))
        self.actionTime_budget_by_behaviors_category.setText(_translate("MainWindow", "Time budget by behavioral category"))
        self.actionExport_events_as_SDIS_file.setText(_translate("MainWindow", "Export events as SDIS file"))
        self.actionRecode_resize_video.setText(_translate("MainWindow", "Re-encode/resize video"))
        self.actionMedia_file_information_2.setText(_translate("MainWindow", "Media file information"))
        self.actionCreate_transitions_flow_diagram.setText(_translate("MainWindow", "Create transitions DOT script"))
        self.actionCreate_transitions_flow_diagram_2.setText(_translate("MainWindow", "Create transitions flow diagram"))
        self.actionAll_transitions.setText(_translate("MainWindow", "Frequencies of transitions"))
        self.actionNumber_of_transitions.setText(_translate("MainWindow", "Number of transitions"))
        self.actionFrequencies_of_transitions_after_behaviors.setText(_translate("MainWindow", "Frequencies of transitions after behaviors"))
        self.actionFind_replace_events.setText(_translate("MainWindow", "Find/replace in events"))
        self.actionFind_events.setText(_translate("MainWindow", "Find in events"))
        self.actionFind_events.setToolTip(_translate("MainWindow", "Find"))
        self.actionHow_to_cite_BORIS.setText(_translate("MainWindow", "How to cite BORIS"))
        self.actionZoom1_1_1.setText(_translate("MainWindow", "1:1 Original"))
        self.actionZoom1_2_1.setText(_translate("MainWindow", "2:1 Double"))
        self.actionZoom1_1_2.setText(_translate("MainWindow", "1:2 Half"))
        self.actionZoom1_1_4.setText(_translate("MainWindow", "1:4 Quarter"))
        self.actionZoom1_fitwindow.setText(_translate("MainWindow", "Fit to window"))
        self.actionZoom2_fitwindow.setText(_translate("MainWindow", "Fit to window"))
        self.actionZoom2_1_4.setText(_translate("MainWindow", "1:4 Quarter"))
        self.actionZoom2_1_2.setText(_translate("MainWindow", "1:2 Half"))
        self.actionZoom2_1_1.setText(_translate("MainWindow", "1:1 Original"))
        self.actionZoom2_2_1.setText(_translate("MainWindow", "2:1 Double"))
        self.actionFilterSubjects.setText(_translate("MainWindow", "Filter subjects"))
        self.actionFilterSubjects.setToolTip(_translate("MainWindow", "Filter subjects"))
        self.actionShowAllSubjects.setText(_translate("MainWindow", "Show all subjects"))
        self.actionShowAllSubjects.setToolTip(_translate("MainWindow", "Show all subjects"))
        self.actionSend_project.setText(_translate("MainWindow", "Project server"))
        self.actionViewBehavior.setText(_translate("MainWindow", "View behavior"))
        self.actionViewBehavior.setToolTip(_translate("MainWindow", "View behavior"))
        self.actionBehaviors_coding_map.setText(_translate("MainWindow", "Behaviors coding map"))
        self.action_create_behaviors_coding_map.setText(_translate("MainWindow", "for behaviors"))
        self.action_create_modifiers_coding_map.setText(_translate("MainWindow", "for modifiers"))
        self.actionPlot_events1.setText(_translate("MainWindow", "Plot events (back compatibility)"))
        self.actionPlot_events2.setText(_translate("MainWindow", "Plot events"))
        self.actionCohen_s_kappa.setText(_translate("MainWindow", "Cohen\'s kappa (time-unit)"))
        self.actionTime_budget_report.setText(_translate("MainWindow", "Synthetic time budget"))
        self.actionCheckStateEventsSingleObs.setText(_translate("MainWindow", "Check state events"))
        self.actionSubjects_pad.setText(_translate("MainWindow", "Subjects pad"))
        self.actionShow_data_files.setText(_translate("MainWindow", "Show data files"))
        self.actionConverters_manager.setText(_translate("MainWindow", "Time converters manager"))
        self.actionView_observation.setText(_translate("MainWindow", "View observation"))
        self.actionRemove_path_from_media_files.setText(_translate("MainWindow", "Remove path from media files"))
        self.actionCheck_project.setText(_translate("MainWindow", "Check project integrity"))
        self.actionBehavior_bar_plot.setText(_translate("MainWindow", "Plot time budget"))
        self.action_obs_list.setText(_translate("MainWindow", "Obs list"))
        self.action_obs_list.setToolTip(_translate("MainWindow", "Observations list"))
        self.actionTest.setText(_translate("MainWindow", "test"))
        self.actionTest_stb2.setText(_translate("MainWindow", "test stb2"))
        self.actionClose_unpaired_events.setText(_translate("MainWindow", "Fix unpaired events"))
        self.actionClose_unpaired_events.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.actionRotate_video.setText(_translate("MainWindow", "Rotate video"))
        self.actionExport_observations_list.setText(_translate("MainWindow", "Export observations list"))
        self.actionExportEvents_2.setText(_translate("MainWindow", "Tabular events"))
        self.actionJWatcher.setText(_translate("MainWindow", "for analysis with JWatcher"))
        self.actionCloseObs.setText(_translate("MainWindow", "Close observation"))
        self.actionFilter_events.setText(_translate("MainWindow", "Filter events"))
        self.actionShow_all_events.setText(_translate("MainWindow", "Show all events"))
        self.actionShow_all_events.setToolTip(_translate("MainWindow", "Show all events"))
        self.actionEdit_event_time.setText(_translate("MainWindow", "Shift time of selected event(s)"))
        self.actionCopy_events.setText(_translate("MainWindow", "Copy events"))
        self.actionPaste_events.setText(_translate("MainWindow", "Paste events"))
        self.actionNoldus_Observer_template.setText(_translate("MainWindow", "Noldus Observer XT template"))
        self.actionExplore_project.setText(_translate("MainWindow", "Explore project"))
        self.actionShow_the_sound_waveform.setText(_translate("MainWindow", "Show the sound waveform"))
        self.actionNeedleman_Wunsch.setText(_translate("MainWindow", "Needleman - Wunsch"))
        self.actionExtract_frames_from_media_files.setText(_translate("MainWindow", "Extract frames from media files"))
        self.actionAdd_image_overlay_on_video.setText(_translate("MainWindow", "Add an image overlay"))
        self.actionRemove_image_overlay.setText(_translate("MainWindow", "Remove"))
        self.action_behavior_binary_table.setText(_translate("MainWindow", "as behaviors binary table"))
        self.actionPlot_current_observation.setText(_translate("MainWindow", "Plot current observation"))
        self.actionFind_in_current_obs.setText(_translate("MainWindow", "Find in events"))
        self.action_advanced_event_filtering.setText(_translate("MainWindow", "Advanced event filtering"))
        self.action_block_dockwidgets.setText(_translate("MainWindow", "Lock dockwidgets"))
        self.actionseparated_subjects.setText(_translate("MainWindow", "separated subjects"))
        self.actiongrouped_subjects.setText(_translate("MainWindow", "grouped subjects"))
        self.actionCurrent_Time_Budget.setText(_translate("MainWindow", "Current Time Budget"))
        self.actionSynthetic_binned_time_budget.setText(_translate("MainWindow", "Synthetic time budget with time bin"))
        self.actionZoom_level.setText(_translate("MainWindow", "Zoom level"))
